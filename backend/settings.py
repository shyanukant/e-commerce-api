"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.2.4.

This file is organized by section, with comments and docstrings for all major settings.
"""
import os
from pathlib import Path
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables for secrets and deployment config
env = environ.Env(
    DJANGO_SECRET_KEY=(str, 'changeme'),
    DEBUG=(bool, False),
    DJANGO_ALLOWED_HOSTS=(str, 'localhost,127.0.0.1'),
    DJANGO_DB_ENGINE=(str, None),
    DJANGO_DB_NAME=(str, None),
    DJANGO_DB_USER=(str, None),
    DJANGO_DB_PASSWORD=(str, None),
    DJANGO_DB_HOST=(str, None),
    DJANGO_DB_PORT=(str, None),
    REDIS_HOST=(str, 'redis'),
    REDIS_PORT=(int, 6379),
)
# Read .env file if present
environ.Env.read_env(str(BASE_DIR / '.env'))

SECRET_KEY = env('DJANGO_SECRET_KEY')
DEBUG = env('DEBUG')
ALLOWED_HOSTS = env('DJANGO_ALLOWED_HOSTS').split(',')

# Application definition
INSTALLED_APPS = [
    'jazzmin',  # Custom admin theme
    'drf_yasg',  # Swagger and Redoc API docs
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'channels',  # Django Channels for ASGI/WebSockets
    'django_filters',
    'django_summernote',
    'store',
    'users',
    'orders',
    'campaigns',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

# Templates and static files
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database configuration (switches between SQLite and Postgres based on env)
DB_ENGINE = env('DJANGO_DB_ENGINE')
if not DB_ENGINE:
    DB_ENGINE = 'sqlite' if DEBUG else 'postgresql'

if DB_ENGINE == 'sqlite':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / env('DJANGO_DB_NAME', default='db.sqlite3'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': env('DJANGO_DB_NAME', default='your_db_name'),
            'USER': env('DJANGO_DB_USER', default='your_db_user'),
            'PASSWORD': env('DJANGO_DB_PASSWORD', default='your_db_password'),
            'HOST': env('DJANGO_DB_HOST', default='db'),
            'PORT': env('DJANGO_DB_PORT', default='5432'),
        }
    }

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static and media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS and REST framework
CORS_ALLOW_ALL_ORIGINS = True
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.openapi.AutoSchema',
}

SWAGGER_SETTINGS = {
    'DEFAULT_MODEL_RENDERING': 'example',
    'USE_SESSION_AUTH': False,
    'DOC_EXPANSION': 'none',
    'TAGS_SORTER': 'alpha',
    'OPERATIONS_SORTER': 'alpha',
    'PERSIST_AUTH': True,
    'CUSTOM_CSS': '/static/css/swagger-hide.css',
}

# ASGI/Channels configuration
ASGI_APPLICATION = 'backend.asgi.application'
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [(env('REDIS_HOST'), env('REDIS_PORT'))],
        },
    },
}

# Stripe payment settings (set these in your .env for production)
STRIPE_PUBLISHABLE_KEY = 'pk_test_your_publishable_key'
STRIPE_SECRET_KEY = 'sk_test_your_secret_key'
STRIPE_WEBHOOK_SECRET = 'whsec_your_webhook_secret'

# JWT authentication settings
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'JTI_CLAIM': 'jti',
}

# Email backend (console for dev, set SMTP for prod)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = 'noreply@yourapp.com'

# App branding and metadata (dynamic, from .env or fallback)
APP_NAME = env('APP_NAME', default='Your App')
APP_BRAND = env('APP_BRAND', default=APP_NAME)
APP_CONTACT_EMAIL = env('APP_CONTACT_EMAIL', default='support@example.com')
APP_TERMS_URL = env('APP_TERMS_URL', default='#')
APP_DESCRIPTION = env('APP_DESCRIPTION', default=f'API documentation for {APP_NAME}.')
APP_COPYRIGHT = env('APP_COPYRIGHT', default=APP_NAME)

# Project metadata for docs and branding
PROJECT_NAME = env('PROJECT_NAME', default=APP_NAME.lower().replace(' ', '_'))
PROJECT_TITLE = env('PROJECT_TITLE', default=f'{APP_NAME} API')
PROJECT_DESCRIPTION = APP_DESCRIPTION
PROJECT_CONTACT = APP_CONTACT_EMAIL
PROJECT_LICENSE = env('PROJECT_LICENSE', default='MIT License')
PROJECT_VERSION = env('PROJECT_VERSION', default='v1')
PROJECT_TERMS = APP_TERMS_URL

# Jazzmin admin theme settings
JAZZMIN_SETTINGS = {
    "site_title": f"{APP_NAME} Admin",
    "site_header": APP_NAME,
    "site_brand": APP_BRAND,
    "welcome_sign": f"Welcome to {APP_NAME} Admin",
    "copyright": APP_COPYRIGHT,
    "search_model": ["auth.User", "store.Product", "orders.Order"],
    "show_sidebar": True,
    "navigation_expanded": False,  # Sidebar collapsed by default
    "hide_apps": [],
    "hide_models": [],
    "order_with_respect_to": ["auth", "store", "orders", "users"],
    "custom_links": {},
    "icons": {
        "auth": "fas fa-users",
        "auth.user": "fas fa-user",
        "auth.group": "fas fa-users-cog",
        "store.product": "fas fa-shirt",
        "store.category": "fas fa-tags",
        "store.coupon": "fas fa-ticket-alt",
        "store.review": "fas fa-star",
        "orders.order": "fas fa-box",
        "orders.cart": "fas fa-shopping-cart",
        "users.userprofile": "fas fa-id-card",
    },
    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-circle",
    "related_modal_active": True,
    "custom_css": "admin/css/jazzmin_overrides.css",
    "custom_js": None,
    "show_ui_builder": False,
    "changeform_format": "horizontal_tabs",
    "changeform_format_overrides": {},
    "language_chooser": False,
    "theme": "default",
    "dark_mode_theme": "darkly",  # Enable dark mode toggle with 'darkly' theme
    "colors": {
        "primary": "#4c51bf",   # blue
        "secondary": "#7c3aed", # purple
        "accent": "#667eea",    # blue-purple
        "info": "#3b82f6",
        "success": "#059669",
        "warning": "#f59e0b",
        "danger": "#dc2626",
        "light": "#f7fafc",
        "dark": "#2d3748",
    },
}
